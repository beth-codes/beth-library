{"version":3,"names":["_rememo","_interopRequireDefault","require","_selectors","isBlockInterfaceHidden","state","getLastInsertedBlocksClientIds","lastBlockInserted","clientIds","isBlockSubtreeDisabled","createSelector","clientId","isChildSubtreeDisabled","childClientId","mode","blockEditingModes","get","undefined","getBlockOrder","every","getBlockEditingMode","blocks","parents","exports","getEnabledClientIdsTree","rootClientId","flatMap","innerBlocks","order","settings","templateLock","blockListSettings","getEnabledBlockParents","ascending","getBlockParents","filter","parent","getRemovalPromptData","removalPromptData","getBlockRemovalRules","blockRemovalRules"],"sources":["@wordpress/block-editor/src/store/private-selectors.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockOrder,\n\tgetBlockParents,\n\tgetBlockEditingMode,\n} from './selectors';\n\n/**\n * Returns true if the block interface is hidden, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the block toolbar is hidden.\n */\nexport function isBlockInterfaceHidden( state ) {\n\treturn state.isBlockInterfaceHidden;\n}\n\n/**\n * Gets the client ids of the last inserted blocks.\n *\n * @param {Object} state Global application state.\n * @return {Array|undefined} Client Ids of the last inserted block(s).\n */\nexport function getLastInsertedBlocksClientIds( state ) {\n\treturn state?.lastBlockInserted?.clientIds;\n}\n\n/**\n * Returns true if the block with the given client ID and all of its descendants\n * have an editing mode of 'disabled', or false otherwise.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block client ID.\n *\n * @return {boolean} Whether the block and its descendants are disabled.\n */\nexport const isBlockSubtreeDisabled = createSelector(\n\t( state, clientId ) => {\n\t\tconst isChildSubtreeDisabled = ( childClientId ) => {\n\t\t\tconst mode = state.blockEditingModes.get( childClientId );\n\t\t\treturn (\n\t\t\t\t( mode === undefined || mode === 'disabled' ) &&\n\t\t\t\tgetBlockOrder( state, childClientId ).every(\n\t\t\t\t\tisChildSubtreeDisabled\n\t\t\t\t)\n\t\t\t);\n\t\t};\n\t\treturn (\n\t\t\tgetBlockEditingMode( state, clientId ) === 'disabled' &&\n\t\t\tgetBlockOrder( state, clientId ).every( isChildSubtreeDisabled )\n\t\t);\n\t},\n\t( state ) => [ state.blockEditingModes, state.blocks.parents ]\n);\n\n/**\n * Returns a tree of block objects with only clientID and innerBlocks set.\n * Blocks with a 'disabled' editing mode are not included.\n *\n * @param {Object}  state        Global application state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Tree of block objects with only clientID and innerBlocks set.\n */\nexport const getEnabledClientIdsTree = createSelector(\n\t( state, rootClientId = '' ) => {\n\t\treturn getBlockOrder( state, rootClientId ).flatMap( ( clientId ) => {\n\t\t\tif ( getBlockEditingMode( state, clientId ) !== 'disabled' ) {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tclientId,\n\t\t\t\t\t\tinnerBlocks: getEnabledClientIdsTree( state, clientId ),\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn getEnabledClientIdsTree( state, clientId );\n\t\t} );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.blockEditingModes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings,\n\t]\n);\n\n/**\n * Returns a list of a given block's ancestors, from top to bottom. Blocks with\n * a 'disabled' editing mode are excluded.\n *\n * @see getBlockParents\n *\n * @param {Object}  state     Global application state.\n * @param {string}  clientId  The block client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top\n *                            to bottom (false).\n */\nexport const getEnabledBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\treturn getBlockParents( state, clientId, ascending ).filter(\n\t\t\t( parent ) => getBlockEditingMode( state, parent ) !== 'disabled'\n\t\t);\n\t},\n\t( state ) => [\n\t\tstate.blocks.parents,\n\t\tstate.blockEditingModes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings,\n\t]\n);\n\n/**\n * Selector that returns the data needed to display a prompt when certain\n * blocks are removed, or `false` if no such prompt is requested.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object|false} Data for removal prompt display, if any.\n */\nexport function getRemovalPromptData( state ) {\n\treturn state.removalPromptData;\n}\n\n/**\n * Returns true if removal prompt exists, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether removal prompt exists.\n */\nexport function getBlockRemovalRules( state ) {\n\treturn state.blockRemovalRules;\n}\n"],"mappings":"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"}