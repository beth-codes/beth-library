{"version":3,"names":["useRef","useRefEffect","getFilesFromDataTransfer","pasteHandler","findTransform","getBlockTransforms","isEmpty","insert","create","replace","__UNSTABLE_LINE_SEPARATOR","LINE_SEPARATOR","isURL","addActiveFormats","isShortcode","splitValue","shouldDismissPastedFiles","adjustLines","value","isMultiline","RegExp","usePasteHandler","props","propsRef","current","element","_onPaste","event","isSelected","disableFormats","onChange","formatTypes","tagName","onReplace","onSplit","onSplitMiddle","__unstableEmbedURLOnPaste","multilineTag","preserveWhiteSpace","pastePlainText","clipboardData","plainText","html","getData","error1","error2","removeWindowsFragments","removeCharsetMetaTag","preventDefault","window","console","log","transformed","reduce","accumlator","__unstablePasteRule","files","text","length","fromTransforms","blocks","accumulator","file","transformation","transform","type","isMatch","push","flat","pastedBlocks","mode","trim","content","HTML","disableFilters","valueToInsert","activeFormats","addEventListener","removeEventListener","startStr","startIdx","indexOf","substring","endStr","endIdx","metaTag","startsWith","slice"],"sources":["@wordpress/block-editor/src/components/rich-text/use-paste-handler.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRef } from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\nimport { getFilesFromDataTransfer } from '@wordpress/dom';\nimport {\n\tpasteHandler,\n\tfindTransform,\n\tgetBlockTransforms,\n} from '@wordpress/blocks';\nimport {\n\tisEmpty,\n\tinsert,\n\tcreate,\n\treplace,\n\t__UNSTABLE_LINE_SEPARATOR as LINE_SEPARATOR,\n} from '@wordpress/rich-text';\nimport { isURL } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport { addActiveFormats, isShortcode } from './utils';\nimport { splitValue } from './split-value';\nimport { shouldDismissPastedFiles } from '../../utils/pasting';\n\n/** @typedef {import('@wordpress/rich-text').RichTextValue} RichTextValue */\n\n/**\n * Replaces line separators with line breaks if not multiline.\n * Replaces line breaks with line separators if multiline.\n *\n * @param {RichTextValue} value       Value to adjust.\n * @param {boolean}       isMultiline Whether to adjust to multiline or not.\n *\n * @return {RichTextValue} Adjusted value.\n */\nfunction adjustLines( value, isMultiline ) {\n\tif ( isMultiline ) {\n\t\treturn replace( value, /\\n+/g, LINE_SEPARATOR );\n\t}\n\n\treturn replace( value, new RegExp( LINE_SEPARATOR, 'g' ), '\\n' );\n}\n\nexport function usePasteHandler( props ) {\n\tconst propsRef = useRef( props );\n\tpropsRef.current = props;\n\treturn useRefEffect( ( element ) => {\n\t\tfunction _onPaste( event ) {\n\t\t\tconst {\n\t\t\t\tisSelected,\n\t\t\t\tdisableFormats,\n\t\t\t\tonChange,\n\t\t\t\tvalue,\n\t\t\t\tformatTypes,\n\t\t\t\ttagName,\n\t\t\t\tonReplace,\n\t\t\t\tonSplit,\n\t\t\t\tonSplitMiddle,\n\t\t\t\t__unstableEmbedURLOnPaste,\n\t\t\t\tmultilineTag,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t\tpastePlainText,\n\t\t\t} = propsRef.current;\n\n\t\t\tif ( ! isSelected ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { clipboardData } = event;\n\n\t\t\tlet plainText = '';\n\t\t\tlet html = '';\n\n\t\t\t// IE11 only supports `Text` as an argument for `getData` and will\n\t\t\t// otherwise throw an invalid argument error, so we try the standard\n\t\t\t// arguments first, then fallback to `Text` if they fail.\n\t\t\ttry {\n\t\t\t\tplainText = clipboardData.getData( 'text/plain' );\n\t\t\t\thtml = clipboardData.getData( 'text/html' );\n\t\t\t} catch ( error1 ) {\n\t\t\t\ttry {\n\t\t\t\t\thtml = clipboardData.getData( 'Text' );\n\t\t\t\t} catch ( error2 ) {\n\t\t\t\t\t// Some browsers like UC Browser paste plain text by default and\n\t\t\t\t\t// don't support clipboardData at all, so allow default\n\t\t\t\t\t// behaviour.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove Windows-specific metadata appended within copied HTML text.\n\t\t\thtml = removeWindowsFragments( html );\n\n\t\t\t// Strip meta tag.\n\t\t\thtml = removeCharsetMetaTag( html );\n\n\t\t\tevent.preventDefault();\n\n\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\twindow.console.log( 'Received HTML:\\n\\n', html );\n\t\t\twindow.console.log( 'Received plain text:\\n\\n', plainText );\n\n\t\t\tif ( disableFormats ) {\n\t\t\t\tonChange( insert( value, plainText ) );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst transformed = formatTypes.reduce(\n\t\t\t\t( accumlator, { __unstablePasteRule } ) => {\n\t\t\t\t\t// Only allow one transform.\n\t\t\t\t\tif ( __unstablePasteRule && accumlator === value ) {\n\t\t\t\t\t\taccumlator = __unstablePasteRule( value, {\n\t\t\t\t\t\t\thtml,\n\t\t\t\t\t\t\tplainText,\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn accumlator;\n\t\t\t\t},\n\t\t\t\tvalue\n\t\t\t);\n\n\t\t\tif ( transformed !== value ) {\n\t\t\t\tonChange( transformed );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst files = [ ...getFilesFromDataTransfer( clipboardData ) ];\n\n\t\t\tif ( pastePlainText ) {\n\t\t\t\tonChange( insert( value, create( { text: plainText } ) ) );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( files?.length ) {\n\t\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\twindow.console.log( 'Received items:\\n\\n', files );\n\t\t\t}\n\n\t\t\t// Process any attached files, unless we infer that the files in\n\t\t\t// question are redundant \"screenshots\" of the actual HTML payload,\n\t\t\t// as created by certain office-type programs.\n\t\t\t//\n\t\t\t// @see shouldDismissPastedFiles\n\t\t\tif (\n\t\t\t\tfiles?.length &&\n\t\t\t\t! shouldDismissPastedFiles( files, html, plainText )\n\t\t\t) {\n\t\t\t\tconst fromTransforms = getBlockTransforms( 'from' );\n\t\t\t\tconst blocks = files\n\t\t\t\t\t.reduce( ( accumulator, file ) => {\n\t\t\t\t\t\tconst transformation = findTransform(\n\t\t\t\t\t\t\tfromTransforms,\n\t\t\t\t\t\t\t( transform ) =>\n\t\t\t\t\t\t\t\ttransform.type === 'files' &&\n\t\t\t\t\t\t\t\ttransform.isMatch( [ file ] )\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif ( transformation ) {\n\t\t\t\t\t\t\taccumulator.push(\n\t\t\t\t\t\t\t\ttransformation.transform( [ file ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t}, [] )\n\t\t\t\t\t.flat();\n\t\t\t\tif ( ! blocks.length ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( onReplace && isEmpty( value ) ) {\n\t\t\t\t\tonReplace( blocks );\n\t\t\t\t} else {\n\t\t\t\t\tsplitValue( {\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tpastedBlocks: blocks,\n\t\t\t\t\t\tonReplace,\n\t\t\t\t\t\tonSplit,\n\t\t\t\t\t\tonSplitMiddle,\n\t\t\t\t\t\tmultilineTag,\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet mode = onReplace && onSplit ? 'AUTO' : 'INLINE';\n\n\t\t\t// Force the blocks mode when the user is pasting\n\t\t\t// on a new line & the content resembles a shortcode.\n\t\t\t// Otherwise it's going to be detected as inline\n\t\t\t// and the shortcode won't be replaced.\n\t\t\tif (\n\t\t\t\tmode === 'AUTO' &&\n\t\t\t\tisEmpty( value ) &&\n\t\t\t\tisShortcode( plainText )\n\t\t\t) {\n\t\t\t\tmode = 'BLOCKS';\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t__unstableEmbedURLOnPaste &&\n\t\t\t\tisEmpty( value ) &&\n\t\t\t\tisURL( plainText.trim() )\n\t\t\t) {\n\t\t\t\tmode = 'BLOCKS';\n\t\t\t}\n\n\t\t\tconst content = pasteHandler( {\n\t\t\t\tHTML: html,\n\t\t\t\tplainText,\n\t\t\t\tmode,\n\t\t\t\ttagName,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t\t// If the data comes from a rich text instance, we can directly\n\t\t\t\t// use it without filtering the data. The filters are only meant\n\t\t\t\t// for externally pasted content and remove inline styles.\n\t\t\t\tdisableFilters: !! clipboardData.getData( 'rich-text' ),\n\t\t\t} );\n\n\t\t\tif ( typeof content === 'string' ) {\n\t\t\t\tlet valueToInsert = create( { html: content } );\n\n\t\t\t\t// If the content should be multiline, we should process text\n\t\t\t\t// separated by a line break as separate lines.\n\t\t\t\tvalueToInsert = adjustLines( valueToInsert, !! multilineTag );\n\n\t\t\t\taddActiveFormats( valueToInsert, value.activeFormats );\n\t\t\t\tonChange( insert( value, valueToInsert ) );\n\t\t\t} else if ( content.length > 0 ) {\n\t\t\t\tif ( onReplace && isEmpty( value ) ) {\n\t\t\t\t\tonReplace( content, content.length - 1, -1 );\n\t\t\t\t} else {\n\t\t\t\t\tsplitValue( {\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tpastedBlocks: content,\n\t\t\t\t\t\tonReplace,\n\t\t\t\t\t\tonSplit,\n\t\t\t\t\t\tonSplitMiddle,\n\t\t\t\t\t\tmultilineTag,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\telement.addEventListener( 'paste', _onPaste );\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'paste', _onPaste );\n\t\t};\n\t}, [] );\n}\n\n/**\n * Normalizes a given string of HTML to remove the Windows-specific \"Fragment\"\n * comments and any preceding and trailing content.\n *\n * @param {string} html the html to be normalized\n * @return {string} the normalized html\n */\nfunction removeWindowsFragments( html ) {\n\tconst startStr = '<!--StartFragment-->';\n\tconst startIdx = html.indexOf( startStr );\n\tif ( startIdx > -1 ) {\n\t\thtml = html.substring( startIdx + startStr.length );\n\t} else {\n\t\t// No point looking for EndFragment\n\t\treturn html;\n\t}\n\n\tconst endStr = '<!--EndFragment-->';\n\tconst endIdx = html.indexOf( endStr );\n\tif ( endIdx > -1 ) {\n\t\thtml = html.substring( 0, endIdx );\n\t}\n\n\treturn html;\n}\n\n/**\n * Removes the charset meta tag inserted by Chromium.\n * See:\n * - https://github.com/WordPress/gutenberg/issues/33585\n * - https://bugs.chromium.org/p/chromium/issues/detail?id=1264616#c4\n *\n * @param {string} html the html to be stripped of the meta tag.\n * @return {string} the cleaned html\n */\nfunction removeCharsetMetaTag( html ) {\n\tconst metaTag = `<meta charset='utf-8'>`;\n\n\tif ( html.startsWith( metaTag ) ) {\n\t\treturn html.slice( metaTag.length );\n\t}\n\n\treturn html;\n}\n"],"mappings":"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"}