{"version":3,"names":["_data","require","_store","_createElement","_concat","_specialCharacters","createEmptyValue","formats","replacements","text","toFormat","tagName","attributes","formatType","class","select","richTextStore","getFormatTypeForClassName","replace","className","trim","getFormatTypeForBareElement","type","__experimentalCreatePrepareEditableTree","__experimentalCreateOnChangeEditableValue","name","registeredAttributes","unregisteredAttributes","_attributes","key","__unstableFilterAttributeValue","contentEditable","contenteditable","create","element","html","range","multilineTag","multilineWrapperTags","__unstableIsEditableTree","isEditableTree","preserveWhiteSpace","length","Array","createElement","document","createFromElement","createFromMultilineElement","accumulateSelection","accumulator","node","value","parentNode","startContainer","startOffset","endContainer","endOffset","currentLength","start","undefined","nodeType","TEXT_NODE","childNodes","end","filterRange","filter","nodeValue","slice","collapseWhiteSpace","string","removeReservedCharacters","RegExp","ZWNBSP","OBJECT_REPLACEMENT_CHARACTER","currentWrapperTags","hasChildNodes","index","nodeName","toLowerCase","ELEMENT_NODE","getAttribute","encodeURIComponent","innerHTML","mergePair","format","getAttributes","indexOf","mergeFormats","newFormats","from","children","LINE_SEPARATOR","hasAttributes","i","safeName","test"],"sources":["@wordpress/rich-text/src/create.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as richTextStore } from './store';\nimport { createElement } from './create-element';\nimport { mergePair } from './concat';\nimport {\n\tLINE_SEPARATOR,\n\tOBJECT_REPLACEMENT_CHARACTER,\n\tZWNBSP,\n} from './special-characters';\n\n/** @typedef {import('./types').RichTextValue} RichTextValue */\n\nfunction createEmptyValue() {\n\treturn {\n\t\tformats: [],\n\t\treplacements: [],\n\t\ttext: '',\n\t};\n}\n\nfunction toFormat( { tagName, attributes } ) {\n\tlet formatType;\n\n\tif ( attributes && attributes.class ) {\n\t\tformatType = select( richTextStore ).getFormatTypeForClassName(\n\t\t\tattributes.class\n\t\t);\n\n\t\tif ( formatType ) {\n\t\t\t// Preserve any additional classes.\n\t\t\tattributes.class = ` ${ attributes.class } `\n\t\t\t\t.replace( ` ${ formatType.className } `, ' ' )\n\t\t\t\t.trim();\n\n\t\t\tif ( ! attributes.class ) {\n\t\t\t\tdelete attributes.class;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! formatType ) {\n\t\tformatType =\n\t\t\tselect( richTextStore ).getFormatTypeForBareElement( tagName );\n\t}\n\n\tif ( ! formatType ) {\n\t\treturn attributes ? { type: tagName, attributes } : { type: tagName };\n\t}\n\n\tif (\n\t\tformatType.__experimentalCreatePrepareEditableTree &&\n\t\t! formatType.__experimentalCreateOnChangeEditableValue\n\t) {\n\t\treturn null;\n\t}\n\n\tif ( ! attributes ) {\n\t\treturn { formatType, type: formatType.name, tagName };\n\t}\n\n\tconst registeredAttributes = {};\n\tconst unregisteredAttributes = {};\n\tconst _attributes = { ...attributes };\n\n\tfor ( const key in formatType.attributes ) {\n\t\tconst name = formatType.attributes[ key ];\n\n\t\tregisteredAttributes[ key ] = _attributes[ name ];\n\n\t\tif ( formatType.__unstableFilterAttributeValue ) {\n\t\t\tregisteredAttributes[ key ] =\n\t\t\t\tformatType.__unstableFilterAttributeValue(\n\t\t\t\t\tkey,\n\t\t\t\t\tregisteredAttributes[ key ]\n\t\t\t\t);\n\t\t}\n\n\t\t// delete the attribute and what's left is considered\n\t\t// to be unregistered.\n\t\tdelete _attributes[ name ];\n\n\t\tif ( typeof registeredAttributes[ key ] === 'undefined' ) {\n\t\t\tdelete registeredAttributes[ key ];\n\t\t}\n\t}\n\n\tfor ( const name in _attributes ) {\n\t\tunregisteredAttributes[ name ] = attributes[ name ];\n\t}\n\n\tif ( formatType.contentEditable === false ) {\n\t\tdelete unregisteredAttributes.contenteditable;\n\t}\n\n\treturn {\n\t\tformatType,\n\t\ttype: formatType.name,\n\t\ttagName,\n\t\tattributes: registeredAttributes,\n\t\tunregisteredAttributes,\n\t};\n}\n\n/**\n * Create a RichText value from an `Element` tree (DOM), an HTML string or a\n * plain text string, with optionally a `Range` object to set the selection. If\n * called without any input, an empty value will be created. If\n * `multilineTag` is provided, any content of direct children whose type matches\n * `multilineTag` will be separated by two newlines. The optional functions can\n * be used to filter out content.\n *\n * A value will have the following shape, which you are strongly encouraged not\n * to modify without the use of helper functions:\n *\n * ```js\n * {\n *   text: string,\n *   formats: Array,\n *   replacements: Array,\n *   ?start: number,\n *   ?end: number,\n * }\n * ```\n *\n * As you can see, text and formatting are separated. `text` holds the text,\n * including any replacement characters for objects and lines. `formats`,\n * `objects` and `lines` are all sparse arrays of the same length as `text`. It\n * holds information about the formatting at the relevant text indices. Finally\n * `start` and `end` state which text indices are selected. They are only\n * provided if a `Range` was given.\n *\n * @param {Object}  [$1]                          Optional named arguments.\n * @param {Element} [$1.element]                  Element to create value from.\n * @param {string}  [$1.text]                     Text to create value from.\n * @param {string}  [$1.html]                     HTML to create value from.\n * @param {Range}   [$1.range]                    Range to create value from.\n * @param {string}  [$1.multilineTag]             Multiline tag if the structure is\n *                                                multiline.\n * @param {Array}   [$1.multilineWrapperTags]     Tags where lines can be found if\n *                                                nesting is possible.\n * @param {boolean} [$1.preserveWhiteSpace]       Whether or not to collapse white\n *                                                space characters.\n * @param {boolean} [$1.__unstableIsEditableTree]\n *\n * @return {RichTextValue} A rich text value.\n */\nexport function create( {\n\telement,\n\ttext,\n\thtml,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\t__unstableIsEditableTree: isEditableTree,\n\tpreserveWhiteSpace,\n} = {} ) {\n\tif ( typeof text === 'string' && text.length > 0 ) {\n\t\treturn {\n\t\t\tformats: Array( text.length ),\n\t\t\treplacements: Array( text.length ),\n\t\t\ttext,\n\t\t};\n\t}\n\n\tif ( typeof html === 'string' && html.length > 0 ) {\n\t\t// It does not matter which document this is, we're just using it to\n\t\t// parse.\n\t\telement = createElement( document, html );\n\t}\n\n\tif ( typeof element !== 'object' ) {\n\t\treturn createEmptyValue();\n\t}\n\n\tif ( ! multilineTag ) {\n\t\treturn createFromElement( {\n\t\t\telement,\n\t\t\trange,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\t}\n\n\treturn createFromMultilineElement( {\n\t\telement,\n\t\trange,\n\t\tmultilineTag,\n\t\tmultilineWrapperTags,\n\t\tisEditableTree,\n\t\tpreserveWhiteSpace,\n\t} );\n}\n\n/**\n * Helper to accumulate the value's selection start and end from the current\n * node and range.\n *\n * @param {Object} accumulator Object to accumulate into.\n * @param {Node}   node        Node to create value with.\n * @param {Range}  range       Range to create value with.\n * @param {Object} value       Value that is being accumulated.\n */\nfunction accumulateSelection( accumulator, node, range, value ) {\n\tif ( ! range ) {\n\t\treturn;\n\t}\n\n\tconst { parentNode } = node;\n\tconst { startContainer, startOffset, endContainer, endOffset } = range;\n\tconst currentLength = accumulator.text.length;\n\n\t// Selection can be extracted from value.\n\tif ( value.start !== undefined ) {\n\t\taccumulator.start = currentLength + value.start;\n\t\t// Range indicates that the current node has selection.\n\t} else if ( node === startContainer && node.nodeType === node.TEXT_NODE ) {\n\t\taccumulator.start = currentLength + startOffset;\n\t\t// Range indicates that the current node is selected.\n\t} else if (\n\t\tparentNode === startContainer &&\n\t\tnode === startContainer.childNodes[ startOffset ]\n\t) {\n\t\taccumulator.start = currentLength;\n\t\t// Range indicates that the selection is after the current node.\n\t} else if (\n\t\tparentNode === startContainer &&\n\t\tnode === startContainer.childNodes[ startOffset - 1 ]\n\t) {\n\t\taccumulator.start = currentLength + value.text.length;\n\t\t// Fallback if no child inside handled the selection.\n\t} else if ( node === startContainer ) {\n\t\taccumulator.start = currentLength;\n\t}\n\n\t// Selection can be extracted from value.\n\tif ( value.end !== undefined ) {\n\t\taccumulator.end = currentLength + value.end;\n\t\t// Range indicates that the current node has selection.\n\t} else if ( node === endContainer && node.nodeType === node.TEXT_NODE ) {\n\t\taccumulator.end = currentLength + endOffset;\n\t\t// Range indicates that the current node is selected.\n\t} else if (\n\t\tparentNode === endContainer &&\n\t\tnode === endContainer.childNodes[ endOffset - 1 ]\n\t) {\n\t\taccumulator.end = currentLength + value.text.length;\n\t\t// Range indicates that the selection is before the current node.\n\t} else if (\n\t\tparentNode === endContainer &&\n\t\tnode === endContainer.childNodes[ endOffset ]\n\t) {\n\t\taccumulator.end = currentLength;\n\t\t// Fallback if no child inside handled the selection.\n\t} else if ( node === endContainer ) {\n\t\taccumulator.end = currentLength + endOffset;\n\t}\n}\n\n/**\n * Adjusts the start and end offsets from a range based on a text filter.\n *\n * @param {Node}     node   Node of which the text should be filtered.\n * @param {Range}    range  The range to filter.\n * @param {Function} filter Function to use to filter the text.\n *\n * @return {Object|void} Object containing range properties.\n */\nfunction filterRange( node, range, filter ) {\n\tif ( ! range ) {\n\t\treturn;\n\t}\n\n\tconst { startContainer, endContainer } = range;\n\tlet { startOffset, endOffset } = range;\n\n\tif ( node === startContainer ) {\n\t\tstartOffset = filter( node.nodeValue.slice( 0, startOffset ) ).length;\n\t}\n\n\tif ( node === endContainer ) {\n\t\tendOffset = filter( node.nodeValue.slice( 0, endOffset ) ).length;\n\t}\n\n\treturn { startContainer, startOffset, endContainer, endOffset };\n}\n\n/**\n * Collapse any whitespace used for HTML formatting to one space character,\n * because it will also be displayed as such by the browser.\n *\n * @param {string} string\n */\nfunction collapseWhiteSpace( string ) {\n\treturn string.replace( /[\\n\\r\\t]+/g, ' ' );\n}\n\n/**\n * Removes reserved characters used by rich-text (zero width non breaking spaces added by `toTree` and object replacement characters).\n *\n * @param {string} string\n */\nexport function removeReservedCharacters( string ) {\n\t// with the global flag, note that we should create a new regex each time OR reset lastIndex state.\n\treturn string.replace(\n\t\tnew RegExp( `[${ ZWNBSP }${ OBJECT_REPLACEMENT_CHARACTER }]`, 'gu' ),\n\t\t''\n\t);\n}\n\n/**\n * Creates a Rich Text value from a DOM element and range.\n *\n * @param {Object}  $1                        Named argements.\n * @param {Element} [$1.element]              Element to create value from.\n * @param {Range}   [$1.range]                Range to create value from.\n * @param {string}  [$1.multilineTag]         Multiline tag if the structure is\n *                                            multiline.\n * @param {Array}   [$1.multilineWrapperTags] Tags where lines can be found if\n *                                            nesting is possible.\n * @param {boolean} [$1.preserveWhiteSpace]   Whether or not to collapse white\n *                                            space characters.\n * @param {Array}   [$1.currentWrapperTags]\n * @param {boolean} [$1.isEditableTree]\n *\n * @return {RichTextValue} A rich text value.\n */\nfunction createFromElement( {\n\telement,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tcurrentWrapperTags = [],\n\tisEditableTree,\n\tpreserveWhiteSpace,\n} ) {\n\tconst accumulator = createEmptyValue();\n\n\tif ( ! element ) {\n\t\treturn accumulator;\n\t}\n\n\tif ( ! element.hasChildNodes() ) {\n\t\taccumulateSelection( accumulator, element, range, createEmptyValue() );\n\t\treturn accumulator;\n\t}\n\n\tconst length = element.childNodes.length;\n\n\t// Optimise for speed.\n\tfor ( let index = 0; index < length; index++ ) {\n\t\tconst node = element.childNodes[ index ];\n\t\tconst tagName = node.nodeName.toLowerCase();\n\n\t\tif ( node.nodeType === node.TEXT_NODE ) {\n\t\t\tlet filter = removeReservedCharacters;\n\n\t\t\tif ( ! preserveWhiteSpace ) {\n\t\t\t\tfilter = ( string ) =>\n\t\t\t\t\tremoveReservedCharacters( collapseWhiteSpace( string ) );\n\t\t\t}\n\n\t\t\tconst text = filter( node.nodeValue );\n\t\t\trange = filterRange( node, range, filter );\n\t\t\taccumulateSelection( accumulator, node, range, { text } );\n\t\t\t// Create a sparse array of the same length as `text`, in which\n\t\t\t// formats can be added.\n\t\t\taccumulator.formats.length += text.length;\n\t\t\taccumulator.replacements.length += text.length;\n\t\t\taccumulator.text += text;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( node.nodeType !== node.ELEMENT_NODE ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (\n\t\t\tisEditableTree &&\n\t\t\t// Ignore any placeholders.\n\t\t\t( node.getAttribute( 'data-rich-text-placeholder' ) ||\n\t\t\t\t// Ignore any line breaks that are not inserted by us.\n\t\t\t\t( tagName === 'br' &&\n\t\t\t\t\t! node.getAttribute( 'data-rich-text-line-break' ) ) )\n\t\t) {\n\t\t\taccumulateSelection( accumulator, node, range, createEmptyValue() );\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( tagName === 'script' ) {\n\t\t\tconst value = {\n\t\t\t\tformats: [ , ],\n\t\t\t\treplacements: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: tagName,\n\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t'data-rich-text-script':\n\t\t\t\t\t\t\t\tnode.getAttribute( 'data-rich-text-script' ) ||\n\t\t\t\t\t\t\t\tencodeURIComponent( node.innerHTML ),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t};\n\t\t\taccumulateSelection( accumulator, node, range, value );\n\t\t\tmergePair( accumulator, value );\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( tagName === 'br' ) {\n\t\t\taccumulateSelection( accumulator, node, range, createEmptyValue() );\n\t\t\tmergePair( accumulator, create( { text: '\\n' } ) );\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst format = toFormat( {\n\t\t\ttagName,\n\t\t\tattributes: getAttributes( { element: node } ),\n\t\t} );\n\n\t\t// When a format type is declared as not editable, replace it with an\n\t\t// object replacement character and preserve the inner HTML.\n\t\tif ( format?.formatType?.contentEditable === false ) {\n\t\t\tdelete format.formatType;\n\t\t\taccumulateSelection( accumulator, node, range, createEmptyValue() );\n\t\t\tmergePair( accumulator, {\n\t\t\t\tformats: [ , ],\n\t\t\t\treplacements: [\n\t\t\t\t\t{\n\t\t\t\t\t\t...format,\n\t\t\t\t\t\tinnerHTML: node.innerHTML,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( format ) delete format.formatType;\n\n\t\tif (\n\t\t\tmultilineWrapperTags &&\n\t\t\tmultilineWrapperTags.indexOf( tagName ) !== -1\n\t\t) {\n\t\t\tconst value = createFromMultilineElement( {\n\t\t\t\telement: node,\n\t\t\t\trange,\n\t\t\t\tmultilineTag,\n\t\t\t\tmultilineWrapperTags,\n\t\t\t\tcurrentWrapperTags: [ ...currentWrapperTags, format ],\n\t\t\t\tisEditableTree,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\n\t\t\taccumulateSelection( accumulator, node, range, value );\n\t\t\tmergePair( accumulator, value );\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst value = createFromElement( {\n\t\t\telement: node,\n\t\t\trange,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\n\t\taccumulateSelection( accumulator, node, range, value );\n\n\t\tif ( ! format ) {\n\t\t\tmergePair( accumulator, value );\n\t\t} else if ( value.text.length === 0 ) {\n\t\t\tif ( format.attributes ) {\n\t\t\t\tmergePair( accumulator, {\n\t\t\t\t\tformats: [ , ],\n\t\t\t\t\treplacements: [ format ],\n\t\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\t// Indices should share a reference to the same formats array.\n\t\t\t// Only create a new reference if `formats` changes.\n\t\t\tfunction mergeFormats( formats ) {\n\t\t\t\tif ( mergeFormats.formats === formats ) {\n\t\t\t\t\treturn mergeFormats.newFormats;\n\t\t\t\t}\n\n\t\t\t\tconst newFormats = formats\n\t\t\t\t\t? [ format, ...formats ]\n\t\t\t\t\t: [ format ];\n\n\t\t\t\tmergeFormats.formats = formats;\n\t\t\t\tmergeFormats.newFormats = newFormats;\n\n\t\t\t\treturn newFormats;\n\t\t\t}\n\n\t\t\t// Since the formats parameter can be `undefined`, preset\n\t\t\t// `mergeFormats` with a new reference.\n\t\t\tmergeFormats.newFormats = [ format ];\n\n\t\t\tmergePair( accumulator, {\n\t\t\t\t...value,\n\t\t\t\tformats: Array.from( value.formats, mergeFormats ),\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn accumulator;\n}\n\n/**\n * Creates a rich text value from a DOM element and range that should be\n * multiline.\n *\n * @param {Object}  $1                        Named argements.\n * @param {Element} [$1.element]              Element to create value from.\n * @param {Range}   [$1.range]                Range to create value from.\n * @param {string}  [$1.multilineTag]         Multiline tag if the structure is\n *                                            multiline.\n * @param {Array}   [$1.multilineWrapperTags] Tags where lines can be found if\n *                                            nesting is possible.\n * @param {Array}   [$1.currentWrapperTags]   Whether to prepend a line\n *                                            separator.\n * @param {boolean} [$1.preserveWhiteSpace]   Whether or not to collapse white\n *                                            space characters.\n * @param {boolean} [$1.isEditableTree]\n *\n * @return {RichTextValue} A rich text value.\n */\nfunction createFromMultilineElement( {\n\telement,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tcurrentWrapperTags = [],\n\tisEditableTree,\n\tpreserveWhiteSpace,\n} ) {\n\tconst accumulator = createEmptyValue();\n\n\tif ( ! element || ! element.hasChildNodes() ) {\n\t\treturn accumulator;\n\t}\n\n\tconst length = element.children.length;\n\n\t// Optimise for speed.\n\tfor ( let index = 0; index < length; index++ ) {\n\t\tconst node = element.children[ index ];\n\n\t\tif ( node.nodeName.toLowerCase() !== multilineTag ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst value = createFromElement( {\n\t\t\telement: node,\n\t\t\trange,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags,\n\t\t\tcurrentWrapperTags,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\n\t\t// Multiline value text should be separated by a line separator.\n\t\tif ( index !== 0 || currentWrapperTags.length > 0 ) {\n\t\t\tmergePair( accumulator, {\n\t\t\t\tformats: [ , ],\n\t\t\t\treplacements:\n\t\t\t\t\tcurrentWrapperTags.length > 0\n\t\t\t\t\t\t? [ currentWrapperTags ]\n\t\t\t\t\t\t: [ , ],\n\t\t\t\ttext: LINE_SEPARATOR,\n\t\t\t} );\n\t\t}\n\n\t\taccumulateSelection( accumulator, node, range, value );\n\t\tmergePair( accumulator, value );\n\t}\n\n\treturn accumulator;\n}\n\n/**\n * Gets the attributes of an element in object shape.\n *\n * @param {Object}  $1         Named argements.\n * @param {Element} $1.element Element to get attributes from.\n *\n * @return {Object|void} Attribute object or `undefined` if the element has no\n *                       attributes.\n */\nfunction getAttributes( { element } ) {\n\tif ( ! element.hasAttributes() ) {\n\t\treturn;\n\t}\n\n\tconst length = element.attributes.length;\n\tlet accumulator;\n\n\t// Optimise for speed.\n\tfor ( let i = 0; i < length; i++ ) {\n\t\tconst { name, value } = element.attributes[ i ];\n\n\t\tif ( name.indexOf( 'data-rich-text-' ) === 0 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst safeName = /^on/i.test( name )\n\t\t\t? 'data-disable-rich-text-' + name\n\t\t\t: name;\n\n\t\taccumulator = accumulator || {};\n\t\taccumulator[ safeName ] = value;\n\t}\n\n\treturn accumulator;\n}\n"],"mappings":";;;;;;;AAGA,IAAAA,KAAA,GAAAC,OAAA;AAKA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,cAAA,GAAAF,OAAA;AACA,IAAAG,OAAA,GAAAH,OAAA;AACA,IAAAI,kBAAA,GAAAJ,OAAA;AAXA;AACA;AACA;;AAGA;AACA;AACA;;AAUA;;AAEA,SAASK,gBAAgBA,CAAA,EAAG;EAC3B,OAAO;IACNC,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE,EAAE;IAChBC,IAAI,EAAE;EACP,CAAC;AACF;AAEA,SAASC,QAAQA,CAAE;EAAEC,OAAO;EAAEC;AAAW,CAAC,EAAG;EAC5C,IAAIC,UAAU;EAEd,IAAKD,UAAU,IAAIA,UAAU,CAACE,KAAK,EAAG;IACrCD,UAAU,GAAG,IAAAE,YAAM,EAAEC,YAAc,CAAC,CAACC,yBAAyB,CAC7DL,UAAU,CAACE,KACZ,CAAC;IAED,IAAKD,UAAU,EAAG;MACjB;MACAD,UAAU,CAACE,KAAK,GAAI,IAAIF,UAAU,CAACE,KAAO,GAAE,CAC1CI,OAAO,CAAG,IAAIL,UAAU,CAACM,SAAW,GAAE,EAAE,GAAI,CAAC,CAC7CC,IAAI,CAAC,CAAC;MAER,IAAK,CAAER,UAAU,CAACE,KAAK,EAAG;QACzB,OAAOF,UAAU,CAACE,KAAK;MACxB;IACD;EACD;EAEA,IAAK,CAAED,UAAU,EAAG;IACnBA,UAAU,GACT,IAAAE,YAAM,EAAEC,YAAc,CAAC,CAACK,2BAA2B,CAAEV,OAAQ,CAAC;EAChE;EAEA,IAAK,CAAEE,UAAU,EAAG;IACnB,OAAOD,UAAU,GAAG;MAAEU,IAAI,EAAEX,OAAO;MAAEC;IAAW,CAAC,GAAG;MAAEU,IAAI,EAAEX;IAAQ,CAAC;EACtE;EAEA,IACCE,UAAU,CAACU,uCAAuC,IAClD,CAAEV,UAAU,CAACW,yCAAyC,EACrD;IACD,OAAO,IAAI;EACZ;EAEA,IAAK,CAAEZ,UAAU,EAAG;IACnB,OAAO;MAAEC,UAAU;MAAES,IAAI,EAAET,UAAU,CAACY,IAAI;MAAEd;IAAQ,CAAC;EACtD;EAEA,MAAMe,oBAAoB,GAAG,CAAC,CAAC;EAC/B,MAAMC,sBAAsB,GAAG,CAAC,CAAC;EACjC,MAAMC,WAAW,GAAG;IAAE,GAAGhB;EAAW,CAAC;EAErC,KAAM,MAAMiB,GAAG,IAAIhB,UAAU,CAACD,UAAU,EAAG;IAC1C,MAAMa,IAAI,GAAGZ,UAAU,CAACD,UAAU,CAAEiB,GAAG,CAAE;IAEzCH,oBAAoB,CAAEG,GAAG,CAAE,GAAGD,WAAW,CAAEH,IAAI,CAAE;IAEjD,IAAKZ,UAAU,CAACiB,8BAA8B,EAAG;MAChDJ,oBAAoB,CAAEG,GAAG,CAAE,GAC1BhB,UAAU,CAACiB,8BAA8B,CACxCD,GAAG,EACHH,oBAAoB,CAAEG,GAAG,CAC1B,CAAC;IACH;;IAEA;IACA;IACA,OAAOD,WAAW,CAAEH,IAAI,CAAE;IAE1B,IAAK,OAAOC,oBAAoB,CAAEG,GAAG,CAAE,KAAK,WAAW,EAAG;MACzD,OAAOH,oBAAoB,CAAEG,GAAG,CAAE;IACnC;EACD;EAEA,KAAM,MAAMJ,IAAI,IAAIG,WAAW,EAAG;IACjCD,sBAAsB,CAAEF,IAAI,CAAE,GAAGb,UAAU,CAAEa,IAAI,CAAE;EACpD;EAEA,IAAKZ,UAAU,CAACkB,eAAe,KAAK,KAAK,EAAG;IAC3C,OAAOJ,sBAAsB,CAACK,eAAe;EAC9C;EAEA,OAAO;IACNnB,UAAU;IACVS,IAAI,EAAET,UAAU,CAACY,IAAI;IACrBd,OAAO;IACPC,UAAU,EAAEc,oBAAoB;IAChCC;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASM,MAAMA,CAAE;EACvBC,OAAO;EACPzB,IAAI;EACJ0B,IAAI;EACJC,KAAK;EACLC,YAAY;EACZC,oBAAoB;EACpBC,wBAAwB,EAAEC,cAAc;EACxCC;AACD,CAAC,GAAG,CAAC,CAAC,EAAG;EACR,IAAK,OAAOhC,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACiC,MAAM,GAAG,CAAC,EAAG;IAClD,OAAO;MACNnC,OAAO,EAAEoC,KAAK,CAAElC,IAAI,CAACiC,MAAO,CAAC;MAC7BlC,YAAY,EAAEmC,KAAK,CAAElC,IAAI,CAACiC,MAAO,CAAC;MAClCjC;IACD,CAAC;EACF;EAEA,IAAK,OAAO0B,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACO,MAAM,GAAG,CAAC,EAAG;IAClD;IACA;IACAR,OAAO,GAAG,IAAAU,4BAAa,EAAEC,QAAQ,EAAEV,IAAK,CAAC;EAC1C;EAEA,IAAK,OAAOD,OAAO,KAAK,QAAQ,EAAG;IAClC,OAAO5B,gBAAgB,CAAC,CAAC;EAC1B;EAEA,IAAK,CAAE+B,YAAY,EAAG;IACrB,OAAOS,iBAAiB,CAAE;MACzBZ,OAAO;MACPE,KAAK;MACLI,cAAc;MACdC;IACD,CAAE,CAAC;EACJ;EAEA,OAAOM,0BAA0B,CAAE;IAClCb,OAAO;IACPE,KAAK;IACLC,YAAY;IACZC,oBAAoB;IACpBE,cAAc;IACdC;EACD,CAAE,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,mBAAmBA,CAAEC,WAAW,EAAEC,IAAI,EAAEd,KAAK,EAAEe,KAAK,EAAG;EAC/D,IAAK,CAAEf,KAAK,EAAG;IACd;EACD;EAEA,MAAM;IAAEgB;EAAW,CAAC,GAAGF,IAAI;EAC3B,MAAM;IAAEG,cAAc;IAAEC,WAAW;IAAEC,YAAY;IAAEC;EAAU,CAAC,GAAGpB,KAAK;EACtE,MAAMqB,aAAa,GAAGR,WAAW,CAACxC,IAAI,CAACiC,MAAM;;EAE7C;EACA,IAAKS,KAAK,CAACO,KAAK,KAAKC,SAAS,EAAG;IAChCV,WAAW,CAACS,KAAK,GAAGD,aAAa,GAAGN,KAAK,CAACO,KAAK;IAC/C;EACD,CAAC,MAAM,IAAKR,IAAI,KAAKG,cAAc,IAAIH,IAAI,CAACU,QAAQ,KAAKV,IAAI,CAACW,SAAS,EAAG;IACzEZ,WAAW,CAACS,KAAK,GAAGD,aAAa,GAAGH,WAAW;IAC/C;EACD,CAAC,MAAM,IACNF,UAAU,KAAKC,cAAc,IAC7BH,IAAI,KAAKG,cAAc,CAACS,UAAU,CAAER,WAAW,CAAE,EAChD;IACDL,WAAW,CAACS,KAAK,GAAGD,aAAa;IACjC;EACD,CAAC,MAAM,IACNL,UAAU,KAAKC,cAAc,IAC7BH,IAAI,KAAKG,cAAc,CAACS,UAAU,CAAER,WAAW,GAAG,CAAC,CAAE,EACpD;IACDL,WAAW,CAACS,KAAK,GAAGD,aAAa,GAAGN,KAAK,CAAC1C,IAAI,CAACiC,MAAM;IACrD;EACD,CAAC,MAAM,IAAKQ,IAAI,KAAKG,cAAc,EAAG;IACrCJ,WAAW,CAACS,KAAK,GAAGD,aAAa;EAClC;;EAEA;EACA,IAAKN,KAAK,CAACY,GAAG,KAAKJ,SAAS,EAAG;IAC9BV,WAAW,CAACc,GAAG,GAAGN,aAAa,GAAGN,KAAK,CAACY,GAAG;IAC3C;EACD,CAAC,MAAM,IAAKb,IAAI,KAAKK,YAAY,IAAIL,IAAI,CAACU,QAAQ,KAAKV,IAAI,CAACW,SAAS,EAAG;IACvEZ,WAAW,CAACc,GAAG,GAAGN,aAAa,GAAGD,SAAS;IAC3C;EACD,CAAC,MAAM,IACNJ,UAAU,KAAKG,YAAY,IAC3BL,IAAI,KAAKK,YAAY,CAACO,UAAU,CAAEN,SAAS,GAAG,CAAC,CAAE,EAChD;IACDP,WAAW,CAACc,GAAG,GAAGN,aAAa,GAAGN,KAAK,CAAC1C,IAAI,CAACiC,MAAM;IACnD;EACD,CAAC,MAAM,IACNU,UAAU,KAAKG,YAAY,IAC3BL,IAAI,KAAKK,YAAY,CAACO,UAAU,CAAEN,SAAS,CAAE,EAC5C;IACDP,WAAW,CAACc,GAAG,GAAGN,aAAa;IAC/B;EACD,CAAC,MAAM,IAAKP,IAAI,KAAKK,YAAY,EAAG;IACnCN,WAAW,CAACc,GAAG,GAAGN,aAAa,GAAGD,SAAS;EAC5C;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,WAAWA,CAAEd,IAAI,EAAEd,KAAK,EAAE6B,MAAM,EAAG;EAC3C,IAAK,CAAE7B,KAAK,EAAG;IACd;EACD;EAEA,MAAM;IAAEiB,cAAc;IAAEE;EAAa,CAAC,GAAGnB,KAAK;EAC9C,IAAI;IAAEkB,WAAW;IAAEE;EAAU,CAAC,GAAGpB,KAAK;EAEtC,IAAKc,IAAI,KAAKG,cAAc,EAAG;IAC9BC,WAAW,GAAGW,MAAM,CAAEf,IAAI,CAACgB,SAAS,CAACC,KAAK,CAAE,CAAC,EAAEb,WAAY,CAAE,CAAC,CAACZ,MAAM;EACtE;EAEA,IAAKQ,IAAI,KAAKK,YAAY,EAAG;IAC5BC,SAAS,GAAGS,MAAM,CAAEf,IAAI,CAACgB,SAAS,CAACC,KAAK,CAAE,CAAC,EAAEX,SAAU,CAAE,CAAC,CAACd,MAAM;EAClE;EAEA,OAAO;IAAEW,cAAc;IAAEC,WAAW;IAAEC,YAAY;IAAEC;EAAU,CAAC;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASY,kBAAkBA,CAAEC,MAAM,EAAG;EACrC,OAAOA,MAAM,CAACnD,OAAO,CAAE,YAAY,EAAE,GAAI,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASoD,wBAAwBA,CAAED,MAAM,EAAG;EAClD;EACA,OAAOA,MAAM,CAACnD,OAAO,CACpB,IAAIqD,MAAM,CAAG,IAAIC,yBAAQ,GAAGC,+CAA8B,GAAE,EAAE,IAAK,CAAC,EACpE,EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS3B,iBAAiBA,CAAE;EAC3BZ,OAAO;EACPE,KAAK;EACLC,YAAY;EACZC,oBAAoB;EACpBoC,kBAAkB,GAAG,EAAE;EACvBlC,cAAc;EACdC;AACD,CAAC,EAAG;EACH,MAAMQ,WAAW,GAAG3C,gBAAgB,CAAC,CAAC;EAEtC,IAAK,CAAE4B,OAAO,EAAG;IAChB,OAAOe,WAAW;EACnB;EAEA,IAAK,CAAEf,OAAO,CAACyC,aAAa,CAAC,CAAC,EAAG;IAChC3B,mBAAmB,CAAEC,WAAW,EAAEf,OAAO,EAAEE,KAAK,EAAE9B,gBAAgB,CAAC,CAAE,CAAC;IACtE,OAAO2C,WAAW;EACnB;EAEA,MAAMP,MAAM,GAAGR,OAAO,CAAC4B,UAAU,CAACpB,MAAM;;EAExC;EACA,KAAM,IAAIkC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGlC,MAAM,EAAEkC,KAAK,EAAE,EAAG;IAC9C,MAAM1B,IAAI,GAAGhB,OAAO,CAAC4B,UAAU,CAAEc,KAAK,CAAE;IACxC,MAAMjE,OAAO,GAAGuC,IAAI,CAAC2B,QAAQ,CAACC,WAAW,CAAC,CAAC;IAE3C,IAAK5B,IAAI,CAACU,QAAQ,KAAKV,IAAI,CAACW,SAAS,EAAG;MACvC,IAAII,MAAM,GAAGK,wBAAwB;MAErC,IAAK,CAAE7B,kBAAkB,EAAG;QAC3BwB,MAAM,GAAKI,MAAM,IAChBC,wBAAwB,CAAEF,kBAAkB,CAAEC,MAAO,CAAE,CAAC;MAC1D;MAEA,MAAM5D,IAAI,GAAGwD,MAAM,CAAEf,IAAI,CAACgB,SAAU,CAAC;MACrC9B,KAAK,GAAG4B,WAAW,CAAEd,IAAI,EAAEd,KAAK,EAAE6B,MAAO,CAAC;MAC1CjB,mBAAmB,CAAEC,WAAW,EAAEC,IAAI,EAAEd,KAAK,EAAE;QAAE3B;MAAK,CAAE,CAAC;MACzD;MACA;MACAwC,WAAW,CAAC1C,OAAO,CAACmC,MAAM,IAAIjC,IAAI,CAACiC,MAAM;MACzCO,WAAW,CAACzC,YAAY,CAACkC,MAAM,IAAIjC,IAAI,CAACiC,MAAM;MAC9CO,WAAW,CAACxC,IAAI,IAAIA,IAAI;MACxB;IACD;IAEA,IAAKyC,IAAI,CAACU,QAAQ,KAAKV,IAAI,CAAC6B,YAAY,EAAG;MAC1C;IACD;IAEA,IACCvC,cAAc;IACd;IACEU,IAAI,CAAC8B,YAAY,CAAE,4BAA6B,CAAC;IAClD;IACErE,OAAO,KAAK,IAAI,IACjB,CAAEuC,IAAI,CAAC8B,YAAY,CAAE,2BAA4B,CAAG,CAAE,EACvD;MACDhC,mBAAmB,CAAEC,WAAW,EAAEC,IAAI,EAAEd,KAAK,EAAE9B,gBAAgB,CAAC,CAAE,CAAC;MACnE;IACD;IAEA,IAAKK,OAAO,KAAK,QAAQ,EAAG;MAC3B,MAAMwC,KAAK,GAAG;QACb5C,OAAO,EAAE,GAAK;QACdC,YAAY,EAAE,CACb;UACCc,IAAI,EAAEX,OAAO;UACbC,UAAU,EAAE;YACX,uBAAuB,EACtBsC,IAAI,CAAC8B,YAAY,CAAE,uBAAwB,CAAC,IAC5CC,kBAAkB,CAAE/B,IAAI,CAACgC,SAAU;UACrC;QACD,CAAC,CACD;QACDzE,IAAI,EAAEgE;MACP,CAAC;MACDzB,mBAAmB,CAAEC,WAAW,EAAEC,IAAI,EAAEd,KAAK,EAAEe,KAAM,CAAC;MACtD,IAAAgC,iBAAS,EAAElC,WAAW,EAAEE,KAAM,CAAC;MAC/B;IACD;IAEA,IAAKxC,OAAO,KAAK,IAAI,EAAG;MACvBqC,mBAAmB,CAAEC,WAAW,EAAEC,IAAI,EAAEd,KAAK,EAAE9B,gBAAgB,CAAC,CAAE,CAAC;MACnE,IAAA6E,iBAAS,EAAElC,WAAW,EAAEhB,MAAM,CAAE;QAAExB,IAAI,EAAE;MAAK,CAAE,CAAE,CAAC;MAClD;IACD;IAEA,MAAM2E,MAAM,GAAG1E,QAAQ,CAAE;MACxBC,OAAO;MACPC,UAAU,EAAEyE,aAAa,CAAE;QAAEnD,OAAO,EAAEgB;MAAK,CAAE;IAC9C,CAAE,CAAC;;IAEH;IACA;IACA,IAAKkC,MAAM,EAAEvE,UAAU,EAAEkB,eAAe,KAAK,KAAK,EAAG;MACpD,OAAOqD,MAAM,CAACvE,UAAU;MACxBmC,mBAAmB,CAAEC,WAAW,EAAEC,IAAI,EAAEd,KAAK,EAAE9B,gBAAgB,CAAC,CAAE,CAAC;MACnE,IAAA6E,iBAAS,EAAElC,WAAW,EAAE;QACvB1C,OAAO,EAAE,GAAK;QACdC,YAAY,EAAE,CACb;UACC,GAAG4E,MAAM;UACTF,SAAS,EAAEhC,IAAI,CAACgC;QACjB,CAAC,CACD;QACDzE,IAAI,EAAEgE;MACP,CAAE,CAAC;MACH;IACD;IAEA,IAAKW,MAAM,EAAG,OAAOA,MAAM,CAACvE,UAAU;IAEtC,IACCyB,oBAAoB,IACpBA,oBAAoB,CAACgD,OAAO,CAAE3E,OAAQ,CAAC,KAAK,CAAC,CAAC,EAC7C;MACD,MAAMwC,KAAK,GAAGJ,0BAA0B,CAAE;QACzCb,OAAO,EAAEgB,IAAI;QACbd,KAAK;QACLC,YAAY;QACZC,oBAAoB;QACpBoC,kBAAkB,EAAE,CAAE,GAAGA,kBAAkB,EAAEU,MAAM,CAAE;QACrD5C,cAAc;QACdC;MACD,CAAE,CAAC;MAEHO,mBAAmB,CAAEC,WAAW,EAAEC,IAAI,EAAEd,KAAK,EAAEe,KAAM,CAAC;MACtD,IAAAgC,iBAAS,EAAElC,WAAW,EAAEE,KAAM,CAAC;MAC/B;IACD;IAEA,MAAMA,KAAK,GAAGL,iBAAiB,CAAE;MAChCZ,OAAO,EAAEgB,IAAI;MACbd,KAAK;MACLC,YAAY;MACZC,oBAAoB;MACpBE,cAAc;MACdC;IACD,CAAE,CAAC;IAEHO,mBAAmB,CAAEC,WAAW,EAAEC,IAAI,EAAEd,KAAK,EAAEe,KAAM,CAAC;IAEtD,IAAK,CAAEiC,MAAM,EAAG;MACf,IAAAD,iBAAS,EAAElC,WAAW,EAAEE,KAAM,CAAC;IAChC,CAAC,MAAM,IAAKA,KAAK,CAAC1C,IAAI,CAACiC,MAAM,KAAK,CAAC,EAAG;MACrC,IAAK0C,MAAM,CAACxE,UAAU,EAAG;QACxB,IAAAuE,iBAAS,EAAElC,WAAW,EAAE;UACvB1C,OAAO,EAAE,GAAK;UACdC,YAAY,EAAE,CAAE4E,MAAM,CAAE;UACxB3E,IAAI,EAAEgE;QACP,CAAE,CAAC;MACJ;IACD,CAAC,MAAM;MACN;MACA;MACA,SAASc,YAAYA,CAAEhF,OAAO,EAAG;QAChC,IAAKgF,YAAY,CAAChF,OAAO,KAAKA,OAAO,EAAG;UACvC,OAAOgF,YAAY,CAACC,UAAU;QAC/B;QAEA,MAAMA,UAAU,GAAGjF,OAAO,GACvB,CAAE6E,MAAM,EAAE,GAAG7E,OAAO,CAAE,GACtB,CAAE6E,MAAM,CAAE;QAEbG,YAAY,CAAChF,OAAO,GAAGA,OAAO;QAC9BgF,YAAY,CAACC,UAAU,GAAGA,UAAU;QAEpC,OAAOA,UAAU;MAClB;;MAEA;MACA;MACAD,YAAY,CAACC,UAAU,GAAG,CAAEJ,MAAM,CAAE;MAEpC,IAAAD,iBAAS,EAAElC,WAAW,EAAE;QACvB,GAAGE,KAAK;QACR5C,OAAO,EAAEoC,KAAK,CAAC8C,IAAI,CAAEtC,KAAK,CAAC5C,OAAO,EAAEgF,YAAa;MAClD,CAAE,CAAC;IACJ;EACD;EAEA,OAAOtC,WAAW;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,0BAA0BA,CAAE;EACpCb,OAAO;EACPE,KAAK;EACLC,YAAY;EACZC,oBAAoB;EACpBoC,kBAAkB,GAAG,EAAE;EACvBlC,cAAc;EACdC;AACD,CAAC,EAAG;EACH,MAAMQ,WAAW,GAAG3C,gBAAgB,CAAC,CAAC;EAEtC,IAAK,CAAE4B,OAAO,IAAI,CAAEA,OAAO,CAACyC,aAAa,CAAC,CAAC,EAAG;IAC7C,OAAO1B,WAAW;EACnB;EAEA,MAAMP,MAAM,GAAGR,OAAO,CAACwD,QAAQ,CAAChD,MAAM;;EAEtC;EACA,KAAM,IAAIkC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGlC,MAAM,EAAEkC,KAAK,EAAE,EAAG;IAC9C,MAAM1B,IAAI,GAAGhB,OAAO,CAACwD,QAAQ,CAAEd,KAAK,CAAE;IAEtC,IAAK1B,IAAI,CAAC2B,QAAQ,CAACC,WAAW,CAAC,CAAC,KAAKzC,YAAY,EAAG;MACnD;IACD;IAEA,MAAMc,KAAK,GAAGL,iBAAiB,CAAE;MAChCZ,OAAO,EAAEgB,IAAI;MACbd,KAAK;MACLC,YAAY;MACZC,oBAAoB;MACpBoC,kBAAkB;MAClBlC,cAAc;MACdC;IACD,CAAE,CAAC;;IAEH;IACA,IAAKmC,KAAK,KAAK,CAAC,IAAIF,kBAAkB,CAAChC,MAAM,GAAG,CAAC,EAAG;MACnD,IAAAyC,iBAAS,EAAElC,WAAW,EAAE;QACvB1C,OAAO,EAAE,GAAK;QACdC,YAAY,EACXkE,kBAAkB,CAAChC,MAAM,GAAG,CAAC,GAC1B,CAAEgC,kBAAkB,CAAE,GACtB,GAAK;QACTjE,IAAI,EAAEkF;MACP,CAAE,CAAC;IACJ;IAEA3C,mBAAmB,CAAEC,WAAW,EAAEC,IAAI,EAAEd,KAAK,EAAEe,KAAM,CAAC;IACtD,IAAAgC,iBAAS,EAAElC,WAAW,EAAEE,KAAM,CAAC;EAChC;EAEA,OAAOF,WAAW;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoC,aAAaA,CAAE;EAAEnD;AAAQ,CAAC,EAAG;EACrC,IAAK,CAAEA,OAAO,CAAC0D,aAAa,CAAC,CAAC,EAAG;IAChC;EACD;EAEA,MAAMlD,MAAM,GAAGR,OAAO,CAACtB,UAAU,CAAC8B,MAAM;EACxC,IAAIO,WAAW;;EAEf;EACA,KAAM,IAAI4C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnD,MAAM,EAAEmD,CAAC,EAAE,EAAG;IAClC,MAAM;MAAEpE,IAAI;MAAE0B;IAAM,CAAC,GAAGjB,OAAO,CAACtB,UAAU,CAAEiF,CAAC,CAAE;IAE/C,IAAKpE,IAAI,CAAC6D,OAAO,CAAE,iBAAkB,CAAC,KAAK,CAAC,EAAG;MAC9C;IACD;IAEA,MAAMQ,QAAQ,GAAG,MAAM,CAACC,IAAI,CAAEtE,IAAK,CAAC,GACjC,yBAAyB,GAAGA,IAAI,GAChCA,IAAI;IAEPwB,WAAW,GAAGA,WAAW,IAAI,CAAC,CAAC;IAC/BA,WAAW,CAAE6C,QAAQ,CAAE,GAAG3C,KAAK;EAChC;EAEA,OAAOF,WAAW;AACnB"}