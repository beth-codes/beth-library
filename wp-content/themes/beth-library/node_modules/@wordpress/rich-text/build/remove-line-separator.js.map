{"version":3,"names":["_specialCharacters","require","_isCollapsed","_remove","removeLineSeparator","value","backward","replacements","text","start","end","collapsed","isCollapsed","index","removeStart","removeEnd","LINE_SEPARATOR","newValue","length","newReplacements","slice","remove"],"sources":["@wordpress/rich-text/src/remove-line-separator.js"],"sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { LINE_SEPARATOR } from './special-characters';\nimport { isCollapsed } from './is-collapsed';\nimport { remove } from './remove';\n\n/** @typedef {import('./types').RichTextValue} RichTextValue */\n\n/**\n * Removes a line separator character, if existing, from a Rich Text value at\n * the current indices. If no line separator exists on the indices it will\n * return undefined.\n *\n * @param {RichTextValue} value    Value to modify.\n * @param {boolean}       backward Indicates if are removing from the start\n *                                 index or the end index.\n *\n * @return {RichTextValue|undefined} A new value with the line separator\n *                                   removed. Or undefined if no line separator\n *                                   is found on the position.\n */\nexport function removeLineSeparator( value, backward = true ) {\n\tconst { replacements, text, start, end } = value;\n\tconst collapsed = isCollapsed( value );\n\tlet index = start - 1;\n\tlet removeStart = collapsed ? start - 1 : start;\n\tlet removeEnd = end;\n\tif ( ! backward ) {\n\t\tindex = end;\n\t\tremoveStart = start;\n\t\tremoveEnd = collapsed ? end + 1 : end;\n\t}\n\n\tif ( text[ index ] !== LINE_SEPARATOR ) {\n\t\treturn;\n\t}\n\n\tlet newValue;\n\t// If the line separator that is about te be removed\n\t// contains wrappers, remove the wrappers first.\n\tif ( collapsed && replacements[ index ] && replacements[ index ].length ) {\n\t\tconst newReplacements = replacements.slice();\n\n\t\tnewReplacements[ index ] = replacements[ index ].slice( 0, -1 );\n\t\tnewValue = {\n\t\t\t...value,\n\t\t\treplacements: newReplacements,\n\t\t};\n\t} else {\n\t\tnewValue = remove( value, removeStart, removeEnd );\n\t}\n\treturn newValue;\n}\n"],"mappings":";;;;;;AAIA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AANA;AACA;AACA;;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,mBAAmBA,CAAEC,KAAK,EAAEC,QAAQ,GAAG,IAAI,EAAG;EAC7D,MAAM;IAAEC,YAAY;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAI,CAAC,GAAGL,KAAK;EAChD,MAAMM,SAAS,GAAG,IAAAC,wBAAW,EAAEP,KAAM,CAAC;EACtC,IAAIQ,KAAK,GAAGJ,KAAK,GAAG,CAAC;EACrB,IAAIK,WAAW,GAAGH,SAAS,GAAGF,KAAK,GAAG,CAAC,GAAGA,KAAK;EAC/C,IAAIM,SAAS,GAAGL,GAAG;EACnB,IAAK,CAAEJ,QAAQ,EAAG;IACjBO,KAAK,GAAGH,GAAG;IACXI,WAAW,GAAGL,KAAK;IACnBM,SAAS,GAAGJ,SAAS,GAAGD,GAAG,GAAG,CAAC,GAAGA,GAAG;EACtC;EAEA,IAAKF,IAAI,CAAEK,KAAK,CAAE,KAAKG,iCAAc,EAAG;IACvC;EACD;EAEA,IAAIC,QAAQ;EACZ;EACA;EACA,IAAKN,SAAS,IAAIJ,YAAY,CAAEM,KAAK,CAAE,IAAIN,YAAY,CAAEM,KAAK,CAAE,CAACK,MAAM,EAAG;IACzE,MAAMC,eAAe,GAAGZ,YAAY,CAACa,KAAK,CAAC,CAAC;IAE5CD,eAAe,CAAEN,KAAK,CAAE,GAAGN,YAAY,CAAEM,KAAK,CAAE,CAACO,KAAK,CAAE,CAAC,EAAE,CAAC,CAAE,CAAC;IAC/DH,QAAQ,GAAG;MACV,GAAGZ,KAAK;MACRE,YAAY,EAAEY;IACf,CAAC;EACF,CAAC,MAAM;IACNF,QAAQ,GAAG,IAAAI,cAAM,EAAEhB,KAAK,EAAES,WAAW,EAAEC,SAAU,CAAC;EACnD;EACA,OAAOE,QAAQ;AAChB"}