{"version":3,"names":["isValueDefined","value","undefined","isValueEmpty","isEmptyString","getDefinedValue","values","fallbackValue","_values$find","find","getDelimiterAndDecimalRegex","locale","formatted","Intl","NumberFormat","format","delimiter","decimal","length","RegExp","INTERNATIONAL_THOUSANDS_DELIMITER","ARABIC_NUMERAL_LOCALES","EASTERN_ARABIC_NUMBERS","isValueNumeric","window","navigator","language","some","l","startsWith","test","replace","d","indexOf","delimiterRegexp","decimalRegexp","valueToCheck","isNaN","parseFloat","isFinite","stringToNumber","numberToString","ensureNumber","ensureString"],"sources":["@wordpress/components/src/utils/values.js"],"sourcesContent":["/* eslint-disable jsdoc/valid-types */\n/**\n * Determines if a value is null or undefined.\n *\n * @template T\n *\n * @param {T} value The value to check.\n * @return {value is Exclude<T, null | undefined>} Whether value is not null or undefined.\n */\nexport function isValueDefined( value ) {\n\treturn value !== undefined && value !== null;\n}\n/* eslint-enable jsdoc/valid-types */\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Determines if a value is empty, null, or undefined.\n *\n * @param {string | number | null | undefined} value The value to check.\n * @return {value is (\"\" | null | undefined)} Whether value is empty.\n */\nexport function isValueEmpty( value ) {\n\tconst isEmptyString = value === '';\n\n\treturn ! isValueDefined( value ) || isEmptyString;\n}\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * Get the first defined/non-null value from an array.\n *\n * @template T\n *\n * @param {Array<T | null | undefined>} values        Values to derive from.\n * @param {T}                           fallbackValue Fallback value if there are no defined values.\n * @return {T} A defined value or the fallback value.\n */\nexport function getDefinedValue( values = [], fallbackValue ) {\n\treturn values.find( isValueDefined ) ?? fallbackValue;\n}\n\n/**\n * @param {string} [locale]\n * @return {[RegExp, RegExp]} The delimiter and decimal regexp\n */\nconst getDelimiterAndDecimalRegex = ( locale ) => {\n\tconst formatted = Intl.NumberFormat( locale ).format( 1000.1 );\n\tconst delimiter = formatted[ 1 ];\n\tconst decimal = formatted[ formatted.length - 2 ];\n\treturn [\n\t\tnew RegExp( `\\\\${ delimiter }`, 'g' ),\n\t\tnew RegExp( `\\\\${ decimal }`, 'g' ),\n\t];\n};\n\n// https://en.wikipedia.org/wiki/Decimal_separator#Current_standards\nconst INTERNATIONAL_THOUSANDS_DELIMITER = / /g;\n\nconst ARABIC_NUMERAL_LOCALES = [ 'ar', 'fa', 'ur', 'ckb', 'ps' ];\n\nconst EASTERN_ARABIC_NUMBERS = /([۰-۹]|[٠-٩])/g;\n\n/**\n * Checks to see if a value is a numeric value (`number` or `string`).\n *\n * Intentionally ignores whether the thousands delimiters are only\n * in the thousands marks.\n *\n * @param {any}    value\n * @param {string} [locale]\n * @return {boolean} Whether value is numeric.\n */\nexport function isValueNumeric( value, locale = window.navigator.language ) {\n\tif ( ARABIC_NUMERAL_LOCALES.some( ( l ) => locale.startsWith( l ) ) ) {\n\t\tlocale = 'en-GB';\n\t\tif ( EASTERN_ARABIC_NUMBERS.test( value ) ) {\n\t\t\tvalue = value\n\t\t\t\t.replace( /[٠-٩]/g, ( /** @type {string} */ d ) =>\n\t\t\t\t\t'٠١٢٣٤٥٦٧٨٩'.indexOf( d )\n\t\t\t\t)\n\t\t\t\t.replace( /[۰-۹]/g, ( /** @type {string} */ d ) =>\n\t\t\t\t\t'۰۱۲۳۴۵۶۷۸۹'.indexOf( d )\n\t\t\t\t)\n\t\t\t\t.replace( /٬/g, ',' )\n\t\t\t\t.replace( /٫/g, '.' );\n\t\t}\n\t}\n\n\tconst [ delimiterRegexp, decimalRegexp ] =\n\t\tgetDelimiterAndDecimalRegex( locale );\n\tconst valueToCheck =\n\t\ttypeof value === 'string'\n\t\t\t? value\n\t\t\t\t\t.replace( delimiterRegexp, '' )\n\t\t\t\t\t.replace( decimalRegexp, '.' )\n\t\t\t\t\t.replace( INTERNATIONAL_THOUSANDS_DELIMITER, '' )\n\t\t\t: value;\n\treturn ! isNaN( parseFloat( valueToCheck ) ) && isFinite( valueToCheck );\n}\n\n/**\n * Converts a string to a number.\n *\n * @param {string} value\n * @return {number} String as a number.\n */\nexport const stringToNumber = ( value ) => {\n\treturn parseFloat( value );\n};\n\n/**\n * Converts a number to a string.\n *\n * @param {number} value\n * @return {string} Number as a string.\n */\nexport const numberToString = ( value ) => {\n\treturn `${ value }`;\n};\n\n/**\n * Regardless of the input being a string or a number, returns a number.\n *\n * Returns `undefined` in case the string is `undefined` or not a valid numeric value.\n *\n * @param {string | number} value\n * @return {number} The parsed number.\n */\nexport const ensureNumber = ( value ) => {\n\treturn typeof value === 'string' ? stringToNumber( value ) : value;\n};\n\n/**\n * Regardless of the input being a string or a number, returns a number.\n *\n * Returns `undefined` in case the string is `undefined` or not a valid numeric value.\n *\n * @param {string | number} value\n * @return {string} The converted string, or `undefined` in case the input is `undefined` or `NaN`.\n */\nexport const ensureString = ( value ) => {\n\treturn typeof value === 'string' ? value : numberToString( value );\n};\n"],"mappings":"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"}