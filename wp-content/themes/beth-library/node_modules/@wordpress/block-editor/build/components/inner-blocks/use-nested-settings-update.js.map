{"version":3,"names":["_element","require","_data","_deprecated","_interopRequireDefault","_store","_layouts","pendingSettingsUpdates","WeakMap","useNestedSettingsUpdate","clientId","allowedBlocks","prioritizedInserterBlocks","defaultBlock","directInsert","__experimentalDefaultBlock","__experimentalDirectInsert","templateLock","captureToolbars","orientation","layout","updateBlockListSettings","useDispatch","blockEditorStore","registry","useRegistry","parentLock","useSelect","select","rootClientId","getBlockRootClientId","getTemplateLock","_allowedBlocks","useMemo","_prioritizedInserterBlocks","_templateLock","undefined","useLayoutEffect","newSettings","__experimentalCaptureToolbars","layoutType","getLayoutType","type","getOrientation","deprecated","alternative","since","version","get","set","push","window","queueMicrotask","length","batch","forEach","args"],"sources":["@wordpress/block-editor/src/components/inner-blocks/use-nested-settings-update.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useLayoutEffect, useMemo } from '@wordpress/element';\nimport { useSelect, useDispatch, useRegistry } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\nimport { getLayoutType } from '../../layouts';\n\n/** @typedef {import('../../selectors').WPDirectInsertBlock } WPDirectInsertBlock */\n\nconst pendingSettingsUpdates = new WeakMap();\n\n/**\n * This hook is a side effect which updates the block-editor store when changes\n * happen to inner block settings. The given props are transformed into a\n * settings object, and if that is different from the current settings object in\n * the block-editor store, then the store is updated with the new settings which\n * came from props.\n *\n * @param {string}               clientId                   The client ID of the block to update.\n * @param {string[]}             allowedBlocks              An array of block names which are permitted\n *                                                          in inner blocks.\n * @param {string[]}             prioritizedInserterBlocks  Block names and/or block variations to be prioritized in the inserter, in the format {blockName}/{variationName}.\n * @param {?WPDirectInsertBlock} defaultBlock               The default block to insert: [ blockName, { blockAttributes } ].\n * @param {?Function|boolean}    directInsert               If a default block should be inserted directly by the appender.\n *\n * @param {?WPDirectInsertBlock} __experimentalDefaultBlock A deprecated prop for the default block to insert: [ blockName, { blockAttributes } ]. Use `defaultBlock` instead.\n *\n * @param {?Function|boolean}    __experimentalDirectInsert A deprecated prop for whether a default block should be inserted directly by the appender. Use `directInsert` instead.\n *\n * @param {string}               [templateLock]             The template lock specified for the inner\n *                                                          blocks component. (e.g. \"all\")\n * @param {boolean}              captureToolbars            Whether or children toolbars should be shown\n *                                                          in the inner blocks component rather than on\n *                                                          the child block.\n * @param {string}               orientation                The direction in which the block\n *                                                          should face.\n * @param {Object}               layout                     The layout object for the block container.\n */\nexport default function useNestedSettingsUpdate(\n\tclientId,\n\tallowedBlocks,\n\tprioritizedInserterBlocks,\n\tdefaultBlock,\n\tdirectInsert,\n\t__experimentalDefaultBlock,\n\t__experimentalDirectInsert,\n\ttemplateLock,\n\tcaptureToolbars,\n\torientation,\n\tlayout\n) {\n\tconst { updateBlockListSettings } = useDispatch( blockEditorStore );\n\tconst registry = useRegistry();\n\n\tconst { parentLock } = useSelect(\n\t\t( select ) => {\n\t\t\tconst rootClientId =\n\t\t\t\tselect( blockEditorStore ).getBlockRootClientId( clientId );\n\t\t\treturn {\n\t\t\t\tparentLock:\n\t\t\t\t\tselect( blockEditorStore ).getTemplateLock( rootClientId ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\t// Memoize allowedBlocks and prioritisedInnerBlocks based on the contents\n\t// of the arrays. Implementors often pass a new array on every render,\n\t// and the contents of the arrays are just strings, so the entire array\n\t// can be passed as dependencies.\n\n\tconst _allowedBlocks = useMemo(\n\t\t() => allowedBlocks,\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\tallowedBlocks\n\t);\n\n\tconst _prioritizedInserterBlocks = useMemo(\n\t\t() => prioritizedInserterBlocks,\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\tprioritizedInserterBlocks\n\t);\n\n\tconst _templateLock =\n\t\ttemplateLock === undefined || parentLock === 'contentOnly'\n\t\t\t? parentLock\n\t\t\t: templateLock;\n\n\tuseLayoutEffect( () => {\n\t\tconst newSettings = {\n\t\t\tallowedBlocks: _allowedBlocks,\n\t\t\tprioritizedInserterBlocks: _prioritizedInserterBlocks,\n\t\t\ttemplateLock: _templateLock,\n\t\t};\n\n\t\t// These values are not defined for RN, so only include them if they\n\t\t// are defined.\n\t\tif ( captureToolbars !== undefined ) {\n\t\t\tnewSettings.__experimentalCaptureToolbars = captureToolbars;\n\t\t}\n\n\t\t// Orientation depends on layout,\n\t\t// ideally the separate orientation prop should be deprecated.\n\t\tif ( orientation !== undefined ) {\n\t\t\tnewSettings.orientation = orientation;\n\t\t} else {\n\t\t\tconst layoutType = getLayoutType( layout?.type );\n\t\t\tnewSettings.orientation = layoutType.getOrientation( layout );\n\t\t}\n\n\t\tif ( __experimentalDefaultBlock !== undefined ) {\n\t\t\tdeprecated( '__experimentalDefaultBlock', {\n\t\t\t\talternative: 'defaultBlock',\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.4',\n\t\t\t} );\n\t\t\tnewSettings.defaultBlock = __experimentalDefaultBlock;\n\t\t}\n\n\t\tif ( defaultBlock !== undefined ) {\n\t\t\tnewSettings.defaultBlock = defaultBlock;\n\t\t}\n\n\t\tif ( __experimentalDirectInsert !== undefined ) {\n\t\t\tdeprecated( '__experimentalDirectInsert', {\n\t\t\t\talternative: 'directInsert',\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.4',\n\t\t\t} );\n\t\t\tnewSettings.directInsert = __experimentalDirectInsert;\n\t\t}\n\n\t\tif ( directInsert !== undefined ) {\n\t\t\tnewSettings.directInsert = directInsert;\n\t\t}\n\n\t\t// Batch updates to block list settings to avoid triggering cascading renders\n\t\t// for each container block included in a tree and optimize initial render.\n\t\t// To avoid triggering updateBlockListSettings for each container block\n\t\t// causing X re-renderings for X container blocks,\n\t\t// we batch all the updatedBlockListSettings in a single \"data\" batch\n\t\t// which results in a single re-render.\n\t\tif ( ! pendingSettingsUpdates.get( registry ) ) {\n\t\t\tpendingSettingsUpdates.set( registry, [] );\n\t\t}\n\t\tpendingSettingsUpdates\n\t\t\t.get( registry )\n\t\t\t.push( [ clientId, newSettings ] );\n\t\twindow.queueMicrotask( () => {\n\t\t\tif ( pendingSettingsUpdates.get( registry )?.length ) {\n\t\t\t\tregistry.batch( () => {\n\t\t\t\t\tpendingSettingsUpdates\n\t\t\t\t\t\t.get( registry )\n\t\t\t\t\t\t.forEach( ( args ) => {\n\t\t\t\t\t\t\tupdateBlockListSettings( ...args );\n\t\t\t\t\t\t} );\n\t\t\t\t\tpendingSettingsUpdates.set( registry, [] );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}, [\n\t\tclientId,\n\t\t_allowedBlocks,\n\t\t_prioritizedInserterBlocks,\n\t\t_templateLock,\n\t\tdefaultBlock,\n\t\tdirectInsert,\n\t\t__experimentalDefaultBlock,\n\t\t__experimentalDirectInsert,\n\t\tcaptureToolbars,\n\t\torientation,\n\t\tupdateBlockListSettings,\n\t\tlayout,\n\t\tregistry,\n\t] );\n}\n"],"mappings":"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"}