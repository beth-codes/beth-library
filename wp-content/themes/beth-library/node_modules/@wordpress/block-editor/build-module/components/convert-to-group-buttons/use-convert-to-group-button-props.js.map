{"version":3,"names":["store","blocksStore","useSelect","blockEditorStore","useConvertToGroupButtonProps","selectedClientIds","select","getBlockRootClientId","getBlocksByClientId","canInsertBlockType","getSelectedBlockClientIds","getGroupingBlockName","getBlockType","clientIds","length","groupingBlockName","rootClientId","undefined","groupingBlockAvailable","blocksSelection","isSingleBlockSelected","firstSelectedBlock","isUngroupable","name","transforms","ungroup","innerBlocks","isGroupable","onUngroup"],"sources":["@wordpress/block-editor/src/components/convert-to-group-buttons/use-convert-to-group-button-props.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\n/**\n * Contains the properties `ConvertToGroupButton` component needs.\n *\n * @typedef {Object} ConvertToGroupButtonProps\n * @property {string[]}  clientIds         An array of the selected client ids.\n * @property {boolean}   isGroupable       Indicates if the selected blocks can be grouped.\n * @property {boolean}   isUngroupable     Indicates if the selected blocks can be ungrouped.\n * @property {WPBlock[]} blocksSelection   An array of the selected blocks.\n * @property {string}    groupingBlockName The name of block used for handling grouping interactions.\n */\n\n/**\n * Returns the properties `ConvertToGroupButton` component needs to work properly.\n * It is used in `BlockSettingsMenuControls` to know if `ConvertToGroupButton`\n * should be rendered, to avoid ending up with an empty MenuGroup.\n *\n * @param {?string[]} selectedClientIds An optional array of clientIds to group. The selected blocks\n *                                      from the block editor store are used if this is not provided.\n *\n * @return {ConvertToGroupButtonProps} Returns the properties needed by `ConvertToGroupButton`.\n */\nexport default function useConvertToGroupButtonProps( selectedClientIds ) {\n\treturn useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlockRootClientId,\n\t\t\t\tgetBlocksByClientId,\n\t\t\t\tcanInsertBlockType,\n\t\t\t\tgetSelectedBlockClientIds,\n\t\t\t} = select( blockEditorStore );\n\t\t\tconst { getGroupingBlockName, getBlockType } =\n\t\t\t\tselect( blocksStore );\n\t\t\tconst clientIds = selectedClientIds?.length\n\t\t\t\t? selectedClientIds\n\t\t\t\t: getSelectedBlockClientIds();\n\t\t\tconst groupingBlockName = getGroupingBlockName();\n\n\t\t\tconst rootClientId = clientIds?.length\n\t\t\t\t? getBlockRootClientId( clientIds[ 0 ] )\n\t\t\t\t: undefined;\n\n\t\t\tconst groupingBlockAvailable = canInsertBlockType(\n\t\t\t\tgroupingBlockName,\n\t\t\t\trootClientId\n\t\t\t);\n\n\t\t\tconst blocksSelection = getBlocksByClientId( clientIds );\n\t\t\tconst isSingleBlockSelected = blocksSelection.length === 1;\n\t\t\tconst [ firstSelectedBlock ] = blocksSelection;\n\t\t\t// A block is ungroupable if it is a single grouping block with inner blocks.\n\t\t\t// If a block has an `ungroup` transform, it is also ungroupable, without the\n\t\t\t// requirement of being the default grouping block.\n\t\t\t// Do we have a single grouping Block selected and does that group have inner blocks?\n\t\t\tconst isUngroupable =\n\t\t\t\tisSingleBlockSelected &&\n\t\t\t\t( firstSelectedBlock.name === groupingBlockName ||\n\t\t\t\t\tgetBlockType( firstSelectedBlock.name )?.transforms\n\t\t\t\t\t\t?.ungroup ) &&\n\t\t\t\t!! firstSelectedBlock.innerBlocks.length;\n\n\t\t\t// Do we have\n\t\t\t// 1. Grouping block available to be inserted?\n\t\t\t// 2. One or more blocks selected\n\t\t\tconst isGroupable =\n\t\t\t\tgroupingBlockAvailable && blocksSelection.length;\n\n\t\t\treturn {\n\t\t\t\tclientIds,\n\t\t\t\tisGroupable,\n\t\t\t\tisUngroupable,\n\t\t\t\tblocksSelection,\n\t\t\t\tgroupingBlockName,\n\t\t\t\tonUngroup:\n\t\t\t\t\tisUngroupable &&\n\t\t\t\t\tgetBlockType( firstSelectedBlock.name )?.transforms\n\t\t\t\t\t\t?.ungroup,\n\t\t\t};\n\t\t},\n\t\t[ selectedClientIds ]\n\t);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,KAAK,IAAIC,WAAW,QAAQ,mBAAmB;AACxD,SAASC,SAAS,QAAQ,iBAAiB;;AAE3C;AACA;AACA;AACA,SAASF,KAAK,IAAIG,gBAAgB,QAAQ,aAAa;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,4BAA4BA,CAAEC,iBAAiB,EAAG;EACzE,OAAOH,SAAS,CACbI,MAAM,IAAM;IACb,MAAM;MACLC,oBAAoB;MACpBC,mBAAmB;MACnBC,kBAAkB;MAClBC;IACD,CAAC,GAAGJ,MAAM,CAAEH,gBAAiB,CAAC;IAC9B,MAAM;MAAEQ,oBAAoB;MAAEC;IAAa,CAAC,GAC3CN,MAAM,CAAEL,WAAY,CAAC;IACtB,MAAMY,SAAS,GAAGR,iBAAiB,EAAES,MAAM,GACxCT,iBAAiB,GACjBK,yBAAyB,CAAC,CAAC;IAC9B,MAAMK,iBAAiB,GAAGJ,oBAAoB,CAAC,CAAC;IAEhD,MAAMK,YAAY,GAAGH,SAAS,EAAEC,MAAM,GACnCP,oBAAoB,CAAEM,SAAS,CAAE,CAAC,CAAG,CAAC,GACtCI,SAAS;IAEZ,MAAMC,sBAAsB,GAAGT,kBAAkB,CAChDM,iBAAiB,EACjBC,YACD,CAAC;IAED,MAAMG,eAAe,GAAGX,mBAAmB,CAAEK,SAAU,CAAC;IACxD,MAAMO,qBAAqB,GAAGD,eAAe,CAACL,MAAM,KAAK,CAAC;IAC1D,MAAM,CAAEO,kBAAkB,CAAE,GAAGF,eAAe;IAC9C;IACA;IACA;IACA;IACA,MAAMG,aAAa,GAClBF,qBAAqB,KACnBC,kBAAkB,CAACE,IAAI,KAAKR,iBAAiB,IAC9CH,YAAY,CAAES,kBAAkB,CAACE,IAAK,CAAC,EAAEC,UAAU,EAChDC,OAAO,CAAE,IACb,CAAC,CAAEJ,kBAAkB,CAACK,WAAW,CAACZ,MAAM;;IAEzC;IACA;IACA;IACA,MAAMa,WAAW,GAChBT,sBAAsB,IAAIC,eAAe,CAACL,MAAM;IAEjD,OAAO;MACND,SAAS;MACTc,WAAW;MACXL,aAAa;MACbH,eAAe;MACfJ,iBAAiB;MACjBa,SAAS,EACRN,aAAa,IACbV,YAAY,CAAES,kBAAkB,CAACE,IAAK,CAAC,EAAEC,UAAU,EAChDC;IACL,CAAC;EACF,CAAC,EACD,CAAEpB,iBAAiB,CACpB,CAAC;AACF"}