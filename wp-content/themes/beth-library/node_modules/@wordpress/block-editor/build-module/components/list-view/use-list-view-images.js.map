{"version":3,"names":["useMemo","useSelect","store","blockEditorStore","MAX_IMAGES","getImageUrl","block","name","attributes","url","alt","getImagesFromGallery","innerBlocks","images","innerBlock","img","push","length","getImagesFromBlock","isExpanded","useListViewImages","clientId","select","_block","getBlock"],"sources":["@wordpress/block-editor/src/components/list-view/use-list-view-images.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useMemo } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\n// Maximum number of images to display in a list view row.\nconst MAX_IMAGES = 3;\n\nfunction getImageUrl( block ) {\n\tif ( block.name !== 'core/image' ) {\n\t\treturn;\n\t}\n\n\tif ( block.attributes?.url ) {\n\t\treturn { url: block.attributes.url, alt: block.attributes.alt };\n\t}\n}\n\nfunction getImagesFromGallery( block ) {\n\tif ( block.name !== 'core/gallery' || ! block.innerBlocks ) {\n\t\treturn [];\n\t}\n\n\tconst images = [];\n\n\tfor ( const innerBlock of block.innerBlocks ) {\n\t\tconst img = getImageUrl( innerBlock );\n\t\tif ( img ) {\n\t\t\timages.push( img );\n\t\t}\n\t\tif ( images.length >= MAX_IMAGES ) {\n\t\t\treturn images;\n\t\t}\n\t}\n\n\treturn images;\n}\n\nfunction getImagesFromBlock( block, isExpanded ) {\n\tconst img = getImageUrl( block );\n\tif ( img ) {\n\t\treturn [ img ];\n\t}\n\treturn isExpanded ? [] : getImagesFromGallery( block );\n}\n\n/**\n * Get a block's preview images for display within a list view row.\n *\n * TODO: Currently only supports images from the core/image and core/gallery\n * blocks. This should be expanded to support other blocks that have images,\n * potentially via an API that blocks can opt into / provide their own logic.\n *\n * @param {Object}  props            Hook properties.\n * @param {string}  props.clientId   The block's clientId.\n * @param {boolean} props.isExpanded Whether or not the block is expanded in the list view.\n * @return {Array} Images.\n */\nexport default function useListViewImages( { clientId, isExpanded } ) {\n\tconst { block } = useSelect(\n\t\t( select ) => {\n\t\t\tconst _block = select( blockEditorStore ).getBlock( clientId );\n\t\t\treturn { block: _block };\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst images = useMemo( () => {\n\t\treturn getImagesFromBlock( block, isExpanded );\n\t}, [ block, isExpanded ] );\n\n\treturn images;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,SAAS,QAAQ,iBAAiB;;AAE3C;AACA;AACA;AACA,SAASC,KAAK,IAAIC,gBAAgB,QAAQ,aAAa;;AAEvD;AACA,MAAMC,UAAU,GAAG,CAAC;AAEpB,SAASC,WAAWA,CAAEC,KAAK,EAAG;EAC7B,IAAKA,KAAK,CAACC,IAAI,KAAK,YAAY,EAAG;IAClC;EACD;EAEA,IAAKD,KAAK,CAACE,UAAU,EAAEC,GAAG,EAAG;IAC5B,OAAO;MAAEA,GAAG,EAAEH,KAAK,CAACE,UAAU,CAACC,GAAG;MAAEC,GAAG,EAAEJ,KAAK,CAACE,UAAU,CAACE;IAAI,CAAC;EAChE;AACD;AAEA,SAASC,oBAAoBA,CAAEL,KAAK,EAAG;EACtC,IAAKA,KAAK,CAACC,IAAI,KAAK,cAAc,IAAI,CAAED,KAAK,CAACM,WAAW,EAAG;IAC3D,OAAO,EAAE;EACV;EAEA,MAAMC,MAAM,GAAG,EAAE;EAEjB,KAAM,MAAMC,UAAU,IAAIR,KAAK,CAACM,WAAW,EAAG;IAC7C,MAAMG,GAAG,GAAGV,WAAW,CAAES,UAAW,CAAC;IACrC,IAAKC,GAAG,EAAG;MACVF,MAAM,CAACG,IAAI,CAAED,GAAI,CAAC;IACnB;IACA,IAAKF,MAAM,CAACI,MAAM,IAAIb,UAAU,EAAG;MAClC,OAAOS,MAAM;IACd;EACD;EAEA,OAAOA,MAAM;AACd;AAEA,SAASK,kBAAkBA,CAAEZ,KAAK,EAAEa,UAAU,EAAG;EAChD,MAAMJ,GAAG,GAAGV,WAAW,CAAEC,KAAM,CAAC;EAChC,IAAKS,GAAG,EAAG;IACV,OAAO,CAAEA,GAAG,CAAE;EACf;EACA,OAAOI,UAAU,GAAG,EAAE,GAAGR,oBAAoB,CAAEL,KAAM,CAAC;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASc,iBAAiBA,CAAE;EAAEC,QAAQ;EAAEF;AAAW,CAAC,EAAG;EACrE,MAAM;IAAEb;EAAM,CAAC,GAAGL,SAAS,CACxBqB,MAAM,IAAM;IACb,MAAMC,MAAM,GAAGD,MAAM,CAAEnB,gBAAiB,CAAC,CAACqB,QAAQ,CAAEH,QAAS,CAAC;IAC9D,OAAO;MAAEf,KAAK,EAAEiB;IAAO,CAAC;EACzB,CAAC,EACD,CAAEF,QAAQ,CACX,CAAC;EAED,MAAMR,MAAM,GAAGb,OAAO,CAAE,MAAM;IAC7B,OAAOkB,kBAAkB,CAAEZ,KAAK,EAAEa,UAAW,CAAC;EAC/C,CAAC,EAAE,CAAEb,KAAK,EAAEa,UAAU,CAAG,CAAC;EAE1B,OAAON,MAAM;AACd"}